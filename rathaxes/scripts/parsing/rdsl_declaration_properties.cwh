/*
**	rdsl_declaration_properties.cwh in scripts/parsing
**	for Rathaxes project
**	made by Christophe Fajardo
**
**	---------------------------------------------------------------------------
**	TODO: Une gestion d'erreure plus fine.
*/

#include "rdsl_declaration_properties.cwf"

/*
**	File rules:
**
**		- propertyDefinition
**		- propertyBlock
**		- setMethod
**		- getMethod
**		- callMethod
*/

/*
 * Property Definition
 */
property(theScope : node) ::=
	=> local propertyNode;
	[
		propertyDefinition(propertyNode.definition, theScope)
		propertyBlock(propertyNode.block)
		';'
		=>
		{
			pushItem	theScope.properties;
			setall		theScope.properties#back = propertyNode;
			ref			theScope.propertyTable[propertyNode.definition.name] = theScope.properties#back;
		}
	]
;

propertyDefinition(theDefinition : node, theScope : node) ::=
	#readIdentifier:{"PUBLIC"}:sAccess #readIdentifier:{"PROPERTY"}
	rathaxes_basic_types:sPropertyType #readIdentifier:sPropertyName
	=> {
			checkPropertyId(theScope.propertyTable, sPropertyName);
			insert theDefinition.name = sPropertyName;
			insert theDefinition.type = sPropertyType;
			insert theDefinition.acessibility = sAccess;
	   }
;

propertyBlock(theProperty : node) ::=
	[
		'{'
			[ setMethod(theProperty) ]?
			[ getMethod(theProperty) ]?
			[ callMethod(theProperty) ]?
			// Here default property values
			[ defaultValue(theProperty) ]*
		'}'
	]
;

setMethod(theProperty : node) ::=
	#readIdentifier:{"SET"}
	=> local setBlock;
    => insert   setBlock.locals;
    => pushItem setBlock.locals;
    => insert   setBlock.locals#back.name = "value";
    => insert   setBlock.locals#back.rtype = "variable";
    => insert   setBlock.locals#back.type = theProperty#parent.definition.type;
	'{'
		[
			rdsl_local_declaration(setBlock.locals)
			| rdsl_single_statement(setBlock.block)
		]*
	'}'
	=> merge theProperty.set = setBlock;
;

getMethod(theProperty : node) ::=
	#readIdentifier:{"GET"}
	=> local getBlock;
    => insert   getBlock.locals;
    => pushItem getBlock.locals;
    => insert   getBlock.locals#back.name = "value";
    => insert   getBlock.locals#back.rtype = "variable";
    => insert   getBlock.locals#back.type = theProperty#parent.definition.type;
	'{'
		[
			rdsl_local_declaration(getBlock.locals)
			| rdsl_single_statement(getBlock.block)
		]*
	'}'
	=> merge theProperty.get = getBlock;
;

callMethod(theProperty : node) ::=
	#readIdentifier:{"CALL"}
	=> local callBlock;
	#continue
	'{'
		[
			rdsl_local_declaration(callBlock.locals)
			| rdsl_single_statement(callBlock.block)
		]*
	'}'
	=> insert theProperty.call = callBlock;
;

defaultValue(theProperty : node) ::=
	=> local	leftExpression;
	=> local	rightExpression;
	'(' rdsl_constant_expresions(leftExpression) ')' "->" [rdsl_constant_expresions(rightExpression) | #readIdentifier]:value ';'
	=> checkDefaultValue(theProperty.values, value);
	=> insert theProperty.values[value] = leftExpression.value;
;
