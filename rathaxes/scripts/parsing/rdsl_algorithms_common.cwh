/*
**	rdsl_algorithms_common.cwh in scripts/parsing
**	for Rathaxes project
**	made by Christophe Fajardo
** ---------------------------------------------------------------------------
*/

rdsl_algorithms_paramerter(nParameter : node) ::=
    [
	    rdsl_variable(nParameter)
        =>
        {
            foreach device in this.devices
            {
                if (findElement(nParameter.name, device.registersTable))
                {
                    insert nParameter.rtype = "register";
                    ref nParameter.register = device.registersTable[nParameter.name];
                }
                if (findElement(nParameter.name, device.propertyTable))
                {
                    insert nParameter.rtype = "property";
                    if (nParameter.operand == "destination")
                        ref nParameter.property = device.propertyTable[nParameter.name].block.set;
                    else
                        ref nParameter.property = device.propertyTable[nParameter.name].block.get;
                }
            }
        }
    ]
	|
    [
        rdsl_constant_expresions(nParameter)
        =>
        {
            insert nParameter.rtype = "constant";
        }
    ]
;

rdsl_algorithms_conditions (nAlgorithm : node) ::=
	[
		rdsl_algorithms_post_condition(nAlgorithm)
		| rdsl_algorithms_pre_condition(nAlgorithm)
		| rdsl_algorithms_invariant_condition(nAlgorithm)
	]
;

rdsl_algorithms_post_condition (nAlgorithm : node) ::=
	#readIdentifier:{"POST"}
	'{'
		[
            
            => ref nAlgorithm.post.locals = nAlgorithm.locals;
            rdsl_local_declaration(nAlgorithm.post.locals)
            |
            [
                => ref nAlgorithm.post.block.locals = nAlgorithm.locals;
                rdsl_single_statement(nAlgorithm.post.block)
            ]
        ]*
	'}'
    => insert nAlgorithm.condition = "post";
;

rdsl_algorithms_pre_condition (nAlgorithm : node) ::=
	#readIdentifier:{"PRE"}
	'{'
		[
            => ref nAlgorithm.pre.locals = nAlgorithm.locals;
            rdsl_local_declaration(nAlgorithm.pre.locals)
            |
            [
                => ref nAlgorithm.pre.block.locals = nAlgorithm.locals;
                rdsl_single_statement(nAlgorithm.pre.block)
            ]
        ]*
	'}'
    => insert nAlgorithm.condition = "pre";
;

rdsl_algorithms_invariant_condition (nAlgorithm : node) ::=
	#readIdentifier:{"INVARIANT"}
	'{'
		[
            => ref nAlgorithm.invariant.locals = nAlgorithm.locals;
            rdsl_local_declaration(nAlgorithm.invariant.locals)
            |
            [
                => ref nAlgorithm.invariant.block.locals = nAlgorithm.locals;
                rdsl_single_statement(nAlgorithm.invariant.block)
            ]
        ]*
	'}'
    => insert nAlgorithm.condition = "invariant";
;
