/*
**	device.cwh in scripts/parsing
**	for Rathaxes project
**	made by Thor
*/

#include "rdsl_declaration_device.cwf"

#include "rdsl_declaration_registers.cwh"
#include "rdsl_declaration_userland.cwh"
#include "rdsl_declaration_properties.cwh"


// peut etre passer en parametre le device cree a l'aide de la directive #pushItem
deviceDefinition(devices : node) ::=
	=> local syntaxError;
	#readIdentifier:{"DEVICE"}
	#continue(syntaxError, rtxCraftError("device name expected."))
	#readIdentifier:sDeviceName
	=>
	{
		if (existVariable(devices[sDeviceName]))
    	{ 
			rtxError("device '" + sDeviceName + "' already defined.");
		}
    	insert devices[sDeviceName];
		insert devices[sDeviceName].name = sDeviceName;
	}
	deviceBlock(devices[sDeviceName])
;

deviceBlock(device : node) ::=
    => local syntaxError;
    #continue(syntaxError, rtxCraftError("DEVICE definition block expected."))
	[
		'{'
		    [ register(device)
			  | rdsl_declaration_variables(device.locals)
			  | property(device)
            ]*
		'}'';'
	]
;

register(theDevice : node) ::=
	#pushItem(theDevice.registers)
    [
		registerDefinition(theDevice.registers#back.definition)
	    [registerBlock(theDevice.registers#back.block)]?
	    [registerSet(theDevice.registers#back.set)]?
	    ';'
		=>
		{
			checkRegisterId(theDevice.registersTable, theDevice.registers#back.definition.name);
			ref theDevice.registersTable[theDevice.registers#back.definition.name] = theDevice.registers#back;
			insert theDevice.registers#back.devicename = theDevice.name;
            insert theDevice.registers#back.definition.rtype = "register";
		}
    ]
;

semantic_block<"misc">(device : node) ::=
        => local syntaxError;
		=> local nConstant;
        #readIdentifier:sKey
        #continue(syntaxError, rtxCraftError("value expected." ))
        ['=' [ rdsl_constant_expresions(nConstant) | #readIdentifier | #readNumeric | #readCString ]:value ';']
        =>
		{
	       insert device["RKM"][sKey] = value;
		}
;
