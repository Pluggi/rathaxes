/*
**	cnorm declarations generation templates
**	made by Lionel Auroux for cnorm_2.0
*/

declare function	nodeIsDeclaration(node : node);
declare function	cnormIterExpressions(expr : node);
declare function	cnormIterBlocks(block : node);
declare function	cnormPrintInitializerList(decl : node);
declare function	cnormPrintPrefixDeclaration(decl : node);
declare function	cnormPrintSuffixDeclaration(decl : node);
declare function	cnormPrintDeclaration(decl : node);
declare function	cnormPrintVariableDeclaration(decl : node);
declare function	cnormPrintTypeDeclaration(decl : node);
declare function	cnormPrintPrototypeDeclaration(decl : node);
declare function	cnormPrintFunctionDeclaration(decl : node);
declare function	cnormPrintArrayDeclaration(decl : node);

function	nodeIsDeclaration(node : node)
{
  switch (node.type)
    {
    case "__VARIABLE__":
      {
	cnormPrintVariableDeclaration(node);
	return true;
      }
    case "__TYPE__":
      {
	cnormPrintTypeDeclaration(node);
	return true;
      }
    case "__PROTOTYPE__":
      {
	cnormPrintPrototypeDeclaration(node);
	return true;
      }
    case "__FUNCTION__":
      {
	cnormPrintFunctionDeclaration(node);
	return true;
      }
    default:
      return false;
    }
}

function	cnormPrintInitializerList(decl : node)
{
      %>{<%
	foreach item in decl
	   {
	      cnormIterExpressions(item);
	      if (!last(item))
		{%>, <%}
	    }
      %>}<% 
}

function	cnormPrintArrayDeclaration(decl : node)
{
  if (existVariable(decl.ctype.array))
    {
      foreach idx in decl.ctype.array
	{
	  %>[@idx@]<%
	}
    }
}

function	cnormPrintPrefixDeclaration(decl : node)
{
  if (existVariable(decl.comment_prefix))
    {
      foreach item in decl.comment_prefix
	{%>@item@ <%}
    }
  if (findElement("typedef", decl.infoType))
    {%>typedef <%}
  if (existVariable(decl.infoType))
    foreach info in decl.infoType
      if (info.key() != "typedef") 
	{%>@info.key()@ <%}
  if (existVariable(decl.specifier))
    {%>@decl.specifier@ <%}
  if (existVariable(decl.sign))
    {%>@decl.sign@ <%}
  if (existVariable(decl.identifier))
    {%>@decl.identifier@ <%}
  if (existVariable(decl.list)
      && decl#parent.type != "__FUNCTION__"
      && decl#parent.type != "__PROTOTYPE__"
      && decl.type != "__PFUNCTION__"
      )
    {
	  %>@"\n"@{@"\n"@<%
	  foreach field in decl.list
	    { 
	      if (decl.specifier == "enum")
		{
		  %>@field.key()@<%
   	          if (existVariable(field.type))
		    { %> = <%    
			 cnormIterExpressions(field);
		    }
		  if (!last(field)) {%>,@"\n"@<%}
		}
	      else
		{ cnormPrintVariableDeclaration(field);}
	    }
	  %>} <%  
    }
  local bFirstPfunc = true;
  if (existVariable(decl.pointer))
    {
      foreach point in decl.pointer
	{
	  if (existVariable(point.level)) {%>@point.level@<%}
	  if (existVariable(point.qualifier)) {%> @point.qualifier@ <%}
	  if (existVariable(point.function)) 
	    {
	      if (bFirstPfunc) 
		{
		  %>(<%
		  bFirstPfunc = false;
		}
	      %>*<%
	      if (existVariable(point.function.name)) {%>@point.function.name@<%}
	      // cas des tableaux de pointeur de fonction
	      cnormPrintArrayDeclaration(point.function);
	    }
	}
    }
  if (!bFirstPfunc) {%>)<%}
}

function	cnormPrintSuffixDeclaration(decl : node)
{
  cnormPrintArrayDeclaration(decl#parent);
  if (existVariable(decl.list))
    {
      if (decl#parent.type == "__FUNCTION__"
	  || decl#parent.type == "__PROTOTYPE__"
	  || decl.type == "__PFUNCTION__"
	  )
	{
	  %>(<%
	  foreach param in decl.list
	    {
	      cnormPrintDeclaration(param);
	      if (!last(param))
		{%>, <%}
	    }
	  if (decl.list.ellipsis)
	  {%>, ...<%}
	  %>)<%
	}
    }
  if (existVariable(decl#parent.comment_suffix))
    {
      %> <%
      foreach item in decl#parent.comment_suffix
	{
	  %>@item@<%
          if (!last(item))
	    {%> <%}
	}
    }  
  if (existVariable(decl#parent.init))
    {
      %> = <%
      local nSize = getArraySize(decl#parent.init); 
      if ($nSize > 0$)
	{	cnormPrintInitializerList(decl#parent.init); }
      else
	{	cnormIterExpressions(decl#parent.init); }
    }
}

function	cnormPrintDeclaration(decl : node)
{
  cnormPrintPrefixDeclaration(decl.ctype);
  // cas du typedef et des pfuncs
  if (existVariable(decl.name) 
      && decl.ctype.type != "__PFUNCTION__") 
    {%>@decl.name@<%} 
  cnormPrintSuffixDeclaration(decl.ctype);
}

function	cnormPrintVariableDeclaration(decl : node)
{
  cnormPrintDeclaration(decl);
  %>;@"\n"@<%
}

function	cnormPrintTypeDeclaration(decl : node)
{
  cnormPrintVariableDeclaration(decl);
}

function	cnormPrintPrototypeDeclaration(decl : node)
{
  cnormPrintVariableDeclaration(decl);
}

function	cnormPrintFunctionDeclaration(decl : node)
{
  cnormPrintDeclaration(decl);
  %>@"\n"@{@"\n"@<%
  cnormIterBlocks(decl.block);
  %>}@"\n"@<%
}
