#include "cnormPatchLib.inc.cws"
#include "cnorm2c/cnorm2c.inc.cws"

global sCnormPath = getEnv("CNORM_PATH");

local tree;
cnormAddRefToGlobalTypes(tree, project);
parseStringAsBNF(sCnormPath + "/src/cnorm.cwp", tree, "typedef int prout;typedef int block;");
cnormAddToGlobalTypes(project, tree);

saveProject("test.tree", tree);

local tree2;
//insert tree2.debug = true;

cnormAddRefToGlobalTypes(tree2, project);
parseStringAsBNF(sCnormPath + "/src/cnorm.cwp", tree2, "typedef prout a;typedef block z;");
cnormAddToGlobalTypes(project, tree2);
saveProject("test2.tree", tree2);

saveProject("project.tree");
// creation d'un node par concatenation de block de code
local main;
parseStringAsBNF(sCnormPath + "/src/cnorm.cwp", main, "int main (int x, char **av) {}");
cnormAddRefToGlobalTypes(main.block[0].block, project);

local aline;
parseStringAsBNF(sCnormPath + "/src/cnorm.cwp", aline, "int a = 42;");

local aline2;
parseStringAsBNF(sCnormPath + "/src/cnorm.cwp", aline2, "int b = 66;");

cnormCopyBlock(main.block#back, aline);
cnormCopyBlock(main.block#back, aline2);


main.block[0].block = "statement";
parseStringAsBNF(sCnormPath + "/src/cnormRulesDispatcher.cwp", main.block[0].block, "b += a;");

main.block[0].block = "declaration";
parseStringAsBNF(sCnormPath + "/src/cnormRulesDispatcher.cwp", main.block[0].block, "int c = 2;");

main.block[0].block = "statement";
parseStringAsBNF(sCnormPath + "/src/cnormRulesDispatcher.cwp", main.block[0].block, "while (42) {}");
cnormAddRefToGlobalTypes(main.block[0].block#back.stmt.block, project);

main.block[0].block#back.stmt.block = "declaration";
parseStringAsBNF(sCnormPath + "/src/cnormRulesDispatcher.cwp", main.block[0].block#back.stmt.block, "prout d = 66;");

saveProject("stmt.tree", main);


//cnormCopyBlock(main.block#back, aline3);

local newCode;
cnormCopyBlock(newCode, tree);
cnormCopyBlock(newCode, tree2);
cnormCopyBlock(newCode, main);
saveProject("newCode.tree", newCode);

traceLine("GENERE LE C:");
traceLine(cnorm2c(newCode.block));
