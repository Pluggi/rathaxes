/*
**      generics.cws in script/misc
**      for Rathaxes project
**      made by Thor
*/


declare function print(string : value);
declare function revStr(string : value);
declare function convertBase<"DtoB">(val : value);
declare function convertBase<"BtoD">(val : value);
declare function getOperatingSystemPathSeparator();
declare function buildPath(aFileName : node);
declare function getValueFromArray(array : node, value : value);
declare function getContextToken(context : node);
declare function getContextFromToken(sToken : node);
declare function getMemberSymbol(nNode : node);


/* alias for traceLine */
function print(string : value)
{
  traceLine(string);
  return;
}


/* return a reversed string */
function revStr(string : value)
{
  local len = $lengthString(string) - 1$;
  local ret = "";

  while (len >= 0)
    {
      ret += charAt(string, len);
      len = $len - 1$;
    }
  return ret;
}


/*
** Convert a decimal value to
** a binary one.
*/
function convertBase<"DtoB">(val : value)
{
  local ret = "";

  if (val == 0) { return 0; }

  while (val != 0)
    {
      ret += $val % 2$;
      val = $val / 2$;
      if (val < 1)
	{ val = 0;}
    }
  ret = revStr(ret);
  return ret;
}


/*
** Convert a binary value to
** a decimal one.
*/
function convertBase<"BtoD">(val : value)
{
  local len = lengthString(val);
  local exp = $len - 1$;
  local res = 0;
  local c;
  
  while (exp >= 0)
    {
      c = charAt(val, $len - exp - 1$);
      res = $res + (c * pow(2, exp))$;
      exp = $exp - 1$;
    }
  return res;
}

function getOperatingSystemPathSeparator()
{
  if (OPERATING_SYSTEM == "unix")
    return "/";
  return "\\";
}

function buildPath(aFileName : node)
{
  local sFullPath = "";

  foreach item in aFileName
  {
    sFullPath += getOperatingSystemPathSeparator() + item;
  }
  return sFullPath;
}

/*
 * getValueFromArray this function return value if exists
 * in array.
 */
function getValueFromArray(array : node, value : value)
{
	foreach item in array
	{
		if (item == value)
			return item;
	}
	return FALSE;
}

function getContextFromToken(sToken : node)
{
    if (findElement(sToken, project.references.contexts))
        ref project.references.currentContext = project.references.contexts[sToken];
    else
    {
        print("Context node #" + sToken + " doesn't exists.");
        exit(EXIT_FAILURE);
    }
}

function    getContextToken(context : node)
{
    insert project.references.current_context_token = $project.references.current_context_token + 1$;
    if (!findElement(project.references.current_context_token, project.references.contexts))
    {
        insert project.references.contexts[project.references.current_context_token];
        ref project.references.contexts[project.references.current_context_token] = context;
    }
    else
    {
        print("Context node #" + project.references.current_context_token + " already exists.");
        exit(EXIT_FAILURE);
    }
    return (project.references.current_context_token);
}

function getMemberSymbol(nNode : node)
{
    local sValue = "";
    localref nItem = nNode;
    while (nItem.hasmember == "TRUE")
    {
        if (sValue == "")
            sValue += toUpperString(nItem.member.name);
        else
            sValue += "_" + toUpperString(nItem.member.name);
        ref nItem = nItem.member;
    }
    return sValue;
}
