Hellow,

	Je vais regrouper ici un peu toutes les conventions de nommage que je
tiens a mettre en place pour Rathaxes, certaines notions importantes a
connaitre pour la bonne realisation du projet ainsi que des directives
d'organisation.

	Un compilateur est un programme permettant de traduire un langage en un
autre langage. Par exemple, GCC traduit du code C en langage machine. De la meme
facon, Rathaxes traduit le DSL Rathaxes en code C qui sera lui-meme traduit par
GCC en langage machine.

    Un compilateur ideal est decoupe en 10 parties creant une file. Chacune de
ces parties traite un point precis du processus de compilation independamment de
la partie qui la precede et de la partie qui la suit. Ces 10 parties sont les
suivantes:


    - Entree du texte du programme (gestion des fichiers, creation du flux de
      caracteres).

    - Analyse lexicale (transformation du flux de caracteres en flux de tokens
      grace a un lexer).

    - Analyse syntaxique (parsing des tokens et creation d'un AST correspondant)

    - Analyse semantique (ou 'context handling', cette partie verifie que les
      regles semantiques du langage sont respectees. De plus, des modifications
      deduites des regles de semantique peuvent etre apportees a l'arbre:
      On parle alors d'AST annote.)

    - Generation du code intermediaire (L'AST est traduit en code intermediaire,
      c'est a dire une structure de code plus generale proche du langage de
      sortie. La forme du code intermediaire, ou IC, est laisse a la discretion
      du developpeur).

    - Optimisation du IC.

    - Generation du 'code' (L'AST est reecrit de comme une liste d'instructions
      symboliques du langage cible. Cette etape permet de se rapprocher le plus
      possible du code de sortie sans toutefois etre soumis a des dependances.
      Par exemple si le code sortie est de l'assembleur, l'ordre des parametres
      d'une instruction n'est pas encore important).

    - Optimisation du code symbolique.

    - Generation definitive du code de sortie.

    - Sortie du texte du programme traduit.


    Il est bien sur evident qu'une telle organisation est tres lourde a mettre
en place et doit etre consideree comme une reference d'organisation d'un
compilateur ideal plutot qu'une fin en soi. De plus, CodeWorker assume toutes
ces parties a lui seul ce qui permet donc d'en fusionner ou d'en eliminer
certaines. En ce qui concerne Rathaxes, l'organisation pour le front end sera la
suivante:


    - Preprocessing des fichiers .rtx a compiler, cela permettra l'utilisation
      de macros et autres includes de facon simple au sein du code du DSL
      Rathaxes.

    - Analyse syntaxique et generation de l'AST.

    - Analyse semantique et annotation de l'AST


    La suite est un peu plus floue. L'idee d'origine etait d'incorporer des
blocs de code C au sein de l'AST correspondant aux noeuds auquels ils etaient
rattaches, pour ensuite etre ecrits dans le fichier de sortie. L'implementation
d'une partie du DSL Rathaxes que nous avons realise sur les registres n'utilise
que de simples templates de generation. Bien que cette implementation ne soit
qu'un test de faisabilite, la methode de generation utilisee nous a eloigne de
notre objectif primaire. En consequence les parties suivantes de notre
compilateur seront les suivantes:

    - Genaration de noeuds de code C identiques a ceux de cnorm_2.0 dans l'AST

    - Optimisation du code C. Cette partie est bien sur la derniere que nous
      traiterons.

    - Generation du Code C de sortie


    Puisque chacune de ces parties est codee avec l'un ou l'autre des 3 langages
de CodeWorker, une certaine rigueur de code, de nomenclature et d'organisation
nous permettra de nous y retrouver. 

     - Le preprocessing des fichiers se fait avec le preprocesseur C du systeme
       (cpp) et la sortie sert a alimenter CodeWorker.

     - Chaque fichier quelqu'il soit debute par un header formate comme dans
       l'exemple suivant:

            /*
	    **      rathaxes.cwp in script/parsing
	    **	    for Rathaxes project
	    **      made by Thor
	    **      modified by Thor, Adrien and Jack
	    */

	Cette regle est consideree comme allant de soi pour chacune des
	directives suivantes. Prenons soin de tenir nos headers a jour.

     - Les fichiers servant a l'analyse syntaxique se trouvent dans le
       repertoire "scripts/parsing" possiblement repartis dans des sous
       dossiers.

		- Les fichiers principaux sont suffixes par 'cwp'.

		- Le fichier debute par un sommaire rappelant chaque regle qui
		  le compose et chacune d'elles est precedee, a sa definition,
		  d'un commentaire decrivant precisement la fonctionnalite
		  apportee par cette regle.

		- Les fichiers contenant les sous-regles d'une regle principale
		  sont suffixes par 'cwh' et sont soumis aux memes regles que
		  celles contenues dans les 'cwp', a ceci pres que le
		  commentaire les precedant n'a pas a etre aussi precis.

		- Les fichiers 'cwh' sont includes apres le sommaire ou juste
		  apres toute information occasionelle (regles speciales,
		  etc...).

		- AUCUNE fonction de script CodeWorker ne doit se trouver dans
		  des fichiers 'cwp' ou 'cwh'. Ces fonctions outils dediees
		  a l'analyse syntaxique servant a factoriser de longues
		  interruptions en script seront regroupes dans des fichiers
		  suffixes par 'cwf', permettant de les differencier de fichiers
		  de scripts plus generaux ou sans rapports avec l'analyse
		  syntaxique en leur reservant le suffixe 'cws'. Chaque fichier
		  'cwf' debute par la liste des declarations de fonctions qu'il
		  implemente.

		- Essayez de respecter des noms de reglesfonctions explicites
		  prefixees par le nom de la partie a laquelle elles sont
		  associees.

     - Les fichiers servant a l'analyse semantique se trouvent dans le
       repertoire "scripts/semantics" (oui oui, avec un 's') possiblement
       repartis dans des sous dossiers.

		- Les fichiers sont suffixes par 'cws' et sont soumis aux memes
		  contraintes que les fichiers 'cwf'.

     - Les fichiers servant a la generation des noeuds de code C au sein de
       l'AST se trouvent dans le repertoire "scripts/ast_c_extensions"
       possiblement repartis dans des sous dossiers.

		- Les fichiers sont suffixes par 'cws' et sont soumis aux memes
		  contraintes que les fichiers 'cwf'.

     - Les fichiers servant a l'optimisation des noeuds de code C au sein de
       l'AST se trouvent dans le repertoire "scripts/ast_c_optimizations"
       possiblement repartis dans des sous dossiers.

		- Les fichiers sont suffixes par 'cws' et sont soumis aux memes
		  contraintes que les fichiers 'cwf'.

     - Les fichiers de templates servant a la generation finale du code C se
       trouvent dans le repertoire "scripts/templates" possiblement repartis
       dans des sous dossiers.

		- Les fichiers sont suffixes par 'cwt' et sont soumis aux memes
		  contraintes que les fichiers 'cwf'.


faire une lib de black library par operating systeme ?