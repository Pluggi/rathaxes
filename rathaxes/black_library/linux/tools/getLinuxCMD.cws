// TODO save the command line.
declare function	getCMD<"linux">(file : value, outputFile : value);

function	parseLinuxCmd(node : reference)
{
	local outCmd;

	translate("parseLinuxCMD.cwp", node, node.tempFile, node.tempFile + ".out");
	outCmd = loadFile(node.tempFile + ".out");
	deleteFile(node.tempFile + ".out");

	return outCmd;
}

/*
 * this function get the linux cpp command line with externals define
 * passed to gcc.
 * ----------------------------------------------------------------------------
 * WARN this function is executed inside /tmp directory so don't bother about
 * junk files.
 * ----------------------------------------------------------------------------
 */
function	getCMD<"linux">(file : value, outputFile : value)
{
	// local node for generate functions.
	local	node;
	local	workingDirecty;

	// Set the linux source path XXX can i get it dynamicaly?
	insert	node.sourcePath = LINUX_SOURCE_PATH;
	insert	node.sourceIncludePath = LINUX_SOURCE_INCLUDE_PATH;

	// Generating command line...
	// Current module filename
	insert	node.fileName = "linux_test_module_" + formatDate(getNow(), "%d%M%Y%H%M%S");
	generate({@}, node, node.fileName + ".c");

	// Module makefile
	insert node.content = "obj-m += " + node.fileName + ".o\n";
	node.content += "\n";
	node.content += "all:\n";
	node.content += "\tmake -C " + LINUX_MAKEFILE_LINK + " M=$(PWD) V=1 modules\n";
	generate({@this.content@@}, node, "Makefile");

	// Output file formating
	insert	node.tempFile = "outpout_temp_" + formatDate(getNow(), "%d%M%Y%H%M%S");

	// XXX we cannot get output from system command so we redirect it in a file.
	if (system("make > " + node.tempFile) != "")
	{
		error("Can not exexute make command");
		exit(-1);
	}
	local cmd = parseLinuxCmd(node);

	cmd = "cpp " + cmd + " -include " + file + " \"/dev/null\" > " + outputFile;
	return cmd;
}
