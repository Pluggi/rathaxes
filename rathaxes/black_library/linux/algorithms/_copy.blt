<%
/*
**  _copy.blt in black_library/linux/
**  for Rathaxes project
**  made by Thor
**  modified by Christophe Fajardo Y Romera
** -----------------------------------------------------------------------------
** Tracing variable 'project.functions["1"].block["2"]' to depth 3:
**     rtype = "algorithms"
**     algorithm = "copy"
**     first_parameter
**         |--+
**             name = "snd_buff"
**             rtype = "register"
**             register = -> 'project.devices["rs232"].registers["1"]'
**                 |--+
**                     definition
**                         |--+
**                             name = "snd_buff"
**                             type = "BIT"
**                             size = "8"
**                             mode = "W"
**                             shape = "........"
**                             map
**                     block
**                     set
**                     devicename = "rs232"
**                     fullname = "t_snd_buff_register"
**     second_parameter
**         |--+
**             name = "input"
**             rtype = "variable"
**     pre
**         |--+
**             locals
**             block
**                 ["0"]
**                     |--+
**                         rtype = "algorithms"
**                         algorithm = "wait"
**                         first_parameter
**                         second_parameter
**     condition = "pre"
** End of variable's trace 'project.functions["1"].block["2"]'.
*/
localref nSelf = project.references.currentContext;
local iIoPort = project.configuration["RKM"]["ioport"];
//traceObject(nSelf, 3);
%>

ADVICE copy PART_OF algorithms
{
    size_t current_size = 0;
    <%
        // recuperation du buffer :D.
        // recuperation de la valeur a copier.
    %>
    while (current_size < size)
    {
        <%
        if (nSelf.condition == "pre")
        {
            local sToken = getContextToken(nSelf.pre.block);
            %> JOINPOINT algorithms(@sToken@) IN algorithms.algorithms; <%
        }

        if (nSelf.first_parameter.rtype == "register")
        {
            local iDestOffset = nSelf.first_parameter.register.definition.map.offset;
            %>
                @nSelf.first_parameter.register.definition.name@_register_object->
                @nSelf.first_parameter.register.definition.name@_outb_value(@iIoPort@ + @iDestOffset@,
            <%
                if (nSelf.second_parameter.rtype == "variable")
                {
                    // Pour le moment on fait comme ca c'est moche mais c'est pas gere dans le front.
                    %>
                    @nSelf.second_parameter.name@[current_size]
                    <%
                }
                else if (nSelf.second_parameter.rtype == "buffer")
                {
                    %>
                    <%
                }
            %>
            );
            <%
        }
        else
        {
            if (nSelf.second_parameter.rtype == "register")
            {
                local iDestOffset = nSelf.second_parameter.register.definition.map.offset;
                if (nSelf.first_parameter.rtype == "variable")
                {
                    %>
                        @nSelf.first_parameter.name@[current_size] =
                        @nSelf.second_parameter.register.definition.name@_register_object->
                        @nSelf.second_parameter.register.definition.name@_inb_value(@iIoPort@ + @iDestOffset@);
                    <%
                }
                else if (nSelf.first_parameter.rtype == "buffer")
                {
                    %>
                    <%
                }
            }
        }

        if (nSelf.condition == "post")
        {
            local sToken = getContextToken(nSelf.post.block);
            %> JOINPOINT algorithms(@sToken@) IN algorithms.algorithms; <%
        }
        %>
        current_size++;
    }
};
