#explicitCopy

root ::=
	#ignore(C++)
	=> insert	this.defines;
	[->"-" cmdoption ]* ->#empty
	#continue
	#empty
;

cmdoption ::=
	[nostdinc | define | include]
;

nostdinc ::=
	"nostdinc"
	=>	{
			if (this.nostdinc != 1)
			{
				%>@" -nostdinc"@<%
				insert	this.nostdinc = 1;
			}
		}
;

define ::=
	"D" 
	[
		[
			#readIdentifier:define '=' [#readUptoIgnore]:definevalue
			=>	{
					if (!findElement(define, this.defines))
					{
						%>@" -D"@@define@@"="@@definevalue@<%
						insert	this.defines[define] = define;
					}
				}
		]
		|
		[
			'"' #readIdentifier:define '=' [->'"']:definevalue
			=>	{
					if (!findElement(define, this.defines))
					{
						%>@" -D\""@@define@@"="@@definevalue@<%
						insert	this.defines[define] = define;
					}
				}
		]
		|
		[
			#readCString:define
			=>
			{
					if (!findElement(define, this.defines))
					{
						%>@" -D\""@@define@@"\""@<%
						insert	this.defines[define] = define;
					}
			}
		]
		|
		[
			[#readUptoIgnore]:define
			=>	{
					if (!findElement(define, this.defines))
					{
						%>@" -D"@@define@<%
						insert	this.defines[define] = define;
					}
				}
		]
	]
;

include ::=
	"I" [#readUptoIgnore]:includepath
	=>	{
			if (includepath != ' ' && findElement(includepath, this.includes) == '')
			{
				%>@" -I"@@this.sourcePath@@includepath@<%
				insert	this.includes[includepath] = includepath;
			}
		}
;
